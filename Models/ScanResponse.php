<?php
/**
 * ScanResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v2`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InteractiveTicketing\Models;

use \ArrayAccess;
use \InteractiveTicketing\ObjectSerializer;

/**
 * ScanResponse Class Doc Comment
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScanResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScanResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'valid' => 'bool',
'code' => 'string',
'message' => 'string',
'details' => 'string',
'scanTime' => 'string',
'method' => 'string',
'barcode' => 'string',
'scanPointId' => 'string',
'testMode' => 'bool',
'event' => '\InteractiveTicketing\Models\Event',
'ticket' => '\InteractiveTicketing\Models\Ticket',
'offlineTicket' => '\InteractiveTicketing\Models\OfflineTicket',
'thirdPartyTicket' => '\InteractiveTicketing\Models\ThirdPartyTicket'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'valid' => null,
'code' => null,
'message' => null,
'details' => null,
'scanTime' => null,
'method' => null,
'barcode' => null,
'scanPointId' => null,
'testMode' => null,
'event' => null,
'ticket' => null,
'offlineTicket' => null,
'thirdPartyTicket' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valid' => 'valid',
'code' => 'code',
'message' => 'message',
'details' => 'details',
'scanTime' => 'scanTime',
'method' => 'method',
'barcode' => 'barcode',
'scanPointId' => 'scanPointId',
'testMode' => 'testMode',
'event' => 'event',
'ticket' => 'ticket',
'offlineTicket' => 'offlineTicket',
'thirdPartyTicket' => 'thirdPartyTicket'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valid' => 'setValid',
'code' => 'setCode',
'message' => 'setMessage',
'details' => 'setDetails',
'scanTime' => 'setScanTime',
'method' => 'setMethod',
'barcode' => 'setBarcode',
'scanPointId' => 'setScanPointId',
'testMode' => 'setTestMode',
'event' => 'setEvent',
'ticket' => 'setTicket',
'offlineTicket' => 'setOfflineTicket',
'thirdPartyTicket' => 'setThirdPartyTicket'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valid' => 'getValid',
'code' => 'getCode',
'message' => 'getMessage',
'details' => 'getDetails',
'scanTime' => 'getScanTime',
'method' => 'getMethod',
'barcode' => 'getBarcode',
'scanPointId' => 'getScanPointId',
'testMode' => 'getTestMode',
'event' => 'getEvent',
'ticket' => 'getTicket',
'offlineTicket' => 'getOfflineTicket',
'thirdPartyTicket' => 'getThirdPartyTicket'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['valid'] = isset($data['valid']) ? $data['valid'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['scanTime'] = isset($data['scanTime']) ? $data['scanTime'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['scanPointId'] = isset($data['scanPointId']) ? $data['scanPointId'] : null;
        $this->container['testMode'] = isset($data['testMode']) ? $data['testMode'] : null;
        $this->container['event'] = isset($data['event']) ? $data['event'] : null;
        $this->container['ticket'] = isset($data['ticket']) ? $data['ticket'] : null;
        $this->container['offlineTicket'] = isset($data['offlineTicket']) ? $data['offlineTicket'] : null;
        $this->container['thirdPartyTicket'] = isset($data['thirdPartyTicket']) ? $data['thirdPartyTicket'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets valid
     *
     * @return bool
     */
    public function getValid()
    {
        return $this->container['valid'];
    }

    /**
     * Sets valid
     *
     * @param bool $valid True indicates scan passed validation
     *
     * @return $this
     */
    public function setValid($valid)
    {
        $this->container['valid'] = $valid;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Returns code string
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Returns message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details Returns details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets scanTime
     *
     * @return string
     */
    public function getScanTime()
    {
        return $this->container['scanTime'];
    }

    /**
     * Sets scanTime
     *
     * @param string $scanTime Returns current time used for the scan
     *
     * @return $this
     */
    public function setScanTime($scanTime)
    {
        $this->container['scanTime'] = $scanTime;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method single, mobile, or passbook based on suffix on barcodes
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode The barcode for the scan
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets scanPointId
     *
     * @return string
     */
    public function getScanPointId()
    {
        return $this->container['scanPointId'];
    }

    /**
     * Sets scanPointId
     *
     * @param string $scanPointId The scanPointId for the scan
     *
     * @return $this
     */
    public function setScanPointId($scanPointId)
    {
        $this->container['scanPointId'] = $scanPointId;

        return $this;
    }

    /**
     * Gets testMode
     *
     * @return bool
     */
    public function getTestMode()
    {
        return $this->container['testMode'];
    }

    /**
     * Sets testMode
     *
     * @param bool $testMode True if test mode is used
     *
     * @return $this
     */
    public function setTestMode($testMode)
    {
        $this->container['testMode'] = $testMode;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \InteractiveTicketing\Models\Event
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \InteractiveTicketing\Models\Event $event event
     *
     * @return $this
     */
    public function setEvent($event)
    {
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets ticket
     *
     * @return \InteractiveTicketing\Models\Ticket
     */
    public function getTicket()
    {
        return $this->container['ticket'];
    }

    /**
     * Sets ticket
     *
     * @param \InteractiveTicketing\Models\Ticket $ticket ticket
     *
     * @return $this
     */
    public function setTicket($ticket)
    {
        $this->container['ticket'] = $ticket;

        return $this;
    }

    /**
     * Gets offlineTicket
     *
     * @return \InteractiveTicketing\Models\OfflineTicket
     */
    public function getOfflineTicket()
    {
        return $this->container['offlineTicket'];
    }

    /**
     * Sets offlineTicket
     *
     * @param \InteractiveTicketing\Models\OfflineTicket $offlineTicket offlineTicket
     *
     * @return $this
     */
    public function setOfflineTicket($offlineTicket)
    {
        $this->container['offlineTicket'] = $offlineTicket;

        return $this;
    }

    /**
     * Gets thirdPartyTicket
     *
     * @return \InteractiveTicketing\Models\ThirdPartyTicket
     */
    public function getThirdPartyTicket()
    {
        return $this->container['thirdPartyTicket'];
    }

    /**
     * Sets thirdPartyTicket
     *
     * @param \InteractiveTicketing\Models\ThirdPartyTicket $thirdPartyTicket thirdPartyTicket
     *
     * @return $this
     */
    public function setThirdPartyTicket($thirdPartyTicket)
    {
        $this->container['thirdPartyTicket'] = $thirdPartyTicket;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
