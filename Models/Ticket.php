<?php
/**
 * Ticket
 *
 * PHP version 5
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v2`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InteractiveTicketing\Models;

use \ArrayAccess;
use \InteractiveTicketing\ObjectSerializer;

/**
 * Ticket Class Doc Comment
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Ticket implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ticketId' => 'int',
'orderId' => 'int',
'barcode' => 'string',
'canceled' => 'bool',
'name' => 'string',
'details' => 'string',
'price' => 'string',
'slotDate' => 'string',
'slotTime' => 'string',
'slotAllDay' => 'bool',
'nameOnTicket' => 'string',
'seatEventTitle' => 'string',
'seatVenueTitle' => 'string',
'seatSection' => 'string',
'seatCustom1' => 'string',
'seatCustom2' => 'string',
'seatRow' => 'string',
'seatRowLabel' => 'string',
'seatNumber' => 'int',
'seatNumberLabel' => 'string',
'seatText' => 'string',
'noPrint' => 'bool',
'noBarcode' => 'bool',
'discount' => 'string',
'fee' => 'string',
'tax' => 'string',
'refund' => 'string',
'promoCode' => 'string',
'promoName' => 'string',
'promoDescription' => 'string',
'department' => '\InteractiveTicketing\Models\Department',
'scans' => '\InteractiveTicketing\Models\Scan[]',
'scanPointConfig' => '\InteractiveTicketing\Models\ScanPointConfig'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ticketId' => null,
'orderId' => null,
'barcode' => null,
'canceled' => null,
'name' => null,
'details' => null,
'price' => null,
'slotDate' => null,
'slotTime' => null,
'slotAllDay' => null,
'nameOnTicket' => null,
'seatEventTitle' => null,
'seatVenueTitle' => null,
'seatSection' => null,
'seatCustom1' => null,
'seatCustom2' => null,
'seatRow' => null,
'seatRowLabel' => null,
'seatNumber' => null,
'seatNumberLabel' => null,
'seatText' => null,
'noPrint' => null,
'noBarcode' => null,
'discount' => null,
'fee' => null,
'tax' => null,
'refund' => null,
'promoCode' => null,
'promoName' => null,
'promoDescription' => null,
'department' => null,
'scans' => null,
'scanPointConfig' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ticketId' => 'ticketId',
'orderId' => 'orderId',
'barcode' => 'barcode',
'canceled' => 'canceled',
'name' => 'name',
'details' => 'details',
'price' => 'price',
'slotDate' => 'slotDate',
'slotTime' => 'slotTime',
'slotAllDay' => 'slotAllDay',
'nameOnTicket' => 'nameOnTicket',
'seatEventTitle' => 'seatEventTitle',
'seatVenueTitle' => 'seatVenueTitle',
'seatSection' => 'seatSection',
'seatCustom1' => 'seatCustom1',
'seatCustom2' => 'seatCustom2',
'seatRow' => 'seatRow',
'seatRowLabel' => 'seatRowLabel',
'seatNumber' => 'seatNumber',
'seatNumberLabel' => 'seatNumberLabel',
'seatText' => 'seatText',
'noPrint' => 'noPrint',
'noBarcode' => 'noBarcode',
'discount' => 'discount',
'fee' => 'fee',
'tax' => 'tax',
'refund' => 'refund',
'promoCode' => 'promoCode',
'promoName' => 'promoName',
'promoDescription' => 'promoDescription',
'department' => '_department',
'scans' => '_scans',
'scanPointConfig' => '_scanPointConfig'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ticketId' => 'setTicketId',
'orderId' => 'setOrderId',
'barcode' => 'setBarcode',
'canceled' => 'setCanceled',
'name' => 'setName',
'details' => 'setDetails',
'price' => 'setPrice',
'slotDate' => 'setSlotDate',
'slotTime' => 'setSlotTime',
'slotAllDay' => 'setSlotAllDay',
'nameOnTicket' => 'setNameOnTicket',
'seatEventTitle' => 'setSeatEventTitle',
'seatVenueTitle' => 'setSeatVenueTitle',
'seatSection' => 'setSeatSection',
'seatCustom1' => 'setSeatCustom1',
'seatCustom2' => 'setSeatCustom2',
'seatRow' => 'setSeatRow',
'seatRowLabel' => 'setSeatRowLabel',
'seatNumber' => 'setSeatNumber',
'seatNumberLabel' => 'setSeatNumberLabel',
'seatText' => 'setSeatText',
'noPrint' => 'setNoPrint',
'noBarcode' => 'setNoBarcode',
'discount' => 'setDiscount',
'fee' => 'setFee',
'tax' => 'setTax',
'refund' => 'setRefund',
'promoCode' => 'setPromoCode',
'promoName' => 'setPromoName',
'promoDescription' => 'setPromoDescription',
'department' => 'setDepartment',
'scans' => 'setScans',
'scanPointConfig' => 'setScanPointConfig'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ticketId' => 'getTicketId',
'orderId' => 'getOrderId',
'barcode' => 'getBarcode',
'canceled' => 'getCanceled',
'name' => 'getName',
'details' => 'getDetails',
'price' => 'getPrice',
'slotDate' => 'getSlotDate',
'slotTime' => 'getSlotTime',
'slotAllDay' => 'getSlotAllDay',
'nameOnTicket' => 'getNameOnTicket',
'seatEventTitle' => 'getSeatEventTitle',
'seatVenueTitle' => 'getSeatVenueTitle',
'seatSection' => 'getSeatSection',
'seatCustom1' => 'getSeatCustom1',
'seatCustom2' => 'getSeatCustom2',
'seatRow' => 'getSeatRow',
'seatRowLabel' => 'getSeatRowLabel',
'seatNumber' => 'getSeatNumber',
'seatNumberLabel' => 'getSeatNumberLabel',
'seatText' => 'getSeatText',
'noPrint' => 'getNoPrint',
'noBarcode' => 'getNoBarcode',
'discount' => 'getDiscount',
'fee' => 'getFee',
'tax' => 'getTax',
'refund' => 'getRefund',
'promoCode' => 'getPromoCode',
'promoName' => 'getPromoName',
'promoDescription' => 'getPromoDescription',
'department' => 'getDepartment',
'scans' => 'getScans',
'scanPointConfig' => 'getScanPointConfig'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ticketId'] = isset($data['ticketId']) ? $data['ticketId'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['canceled'] = isset($data['canceled']) ? $data['canceled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['slotDate'] = isset($data['slotDate']) ? $data['slotDate'] : null;
        $this->container['slotTime'] = isset($data['slotTime']) ? $data['slotTime'] : null;
        $this->container['slotAllDay'] = isset($data['slotAllDay']) ? $data['slotAllDay'] : null;
        $this->container['nameOnTicket'] = isset($data['nameOnTicket']) ? $data['nameOnTicket'] : null;
        $this->container['seatEventTitle'] = isset($data['seatEventTitle']) ? $data['seatEventTitle'] : null;
        $this->container['seatVenueTitle'] = isset($data['seatVenueTitle']) ? $data['seatVenueTitle'] : null;
        $this->container['seatSection'] = isset($data['seatSection']) ? $data['seatSection'] : null;
        $this->container['seatCustom1'] = isset($data['seatCustom1']) ? $data['seatCustom1'] : null;
        $this->container['seatCustom2'] = isset($data['seatCustom2']) ? $data['seatCustom2'] : null;
        $this->container['seatRow'] = isset($data['seatRow']) ? $data['seatRow'] : null;
        $this->container['seatRowLabel'] = isset($data['seatRowLabel']) ? $data['seatRowLabel'] : null;
        $this->container['seatNumber'] = isset($data['seatNumber']) ? $data['seatNumber'] : null;
        $this->container['seatNumberLabel'] = isset($data['seatNumberLabel']) ? $data['seatNumberLabel'] : null;
        $this->container['seatText'] = isset($data['seatText']) ? $data['seatText'] : null;
        $this->container['noPrint'] = isset($data['noPrint']) ? $data['noPrint'] : null;
        $this->container['noBarcode'] = isset($data['noBarcode']) ? $data['noBarcode'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['refund'] = isset($data['refund']) ? $data['refund'] : null;
        $this->container['promoCode'] = isset($data['promoCode']) ? $data['promoCode'] : null;
        $this->container['promoName'] = isset($data['promoName']) ? $data['promoName'] : null;
        $this->container['promoDescription'] = isset($data['promoDescription']) ? $data['promoDescription'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['scans'] = isset($data['scans']) ? $data['scans'] : null;
        $this->container['scanPointConfig'] = isset($data['scanPointConfig']) ? $data['scanPointConfig'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ticketId
     *
     * @return int
     */
    public function getTicketId()
    {
        return $this->container['ticketId'];
    }

    /**
     * Sets ticketId
     *
     * @param int $ticketId The ticket ID
     *
     * @return $this
     */
    public function setTicketId($ticketId)
    {
        $this->container['ticketId'] = $ticketId;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param int $orderId The ticket order ID
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode The ticket barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return bool
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param bool $canceled Canceled / Voided ticket
     *
     * @return $this
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of ticket
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details Details about the ticket
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price Purchase price for the ticket
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets slotDate
     *
     * @return string
     */
    public function getSlotDate()
    {
        return $this->container['slotDate'];
    }

    /**
     * Sets slotDate
     *
     * @param string $slotDate Applicable to timed ticketing
     *
     * @return $this
     */
    public function setSlotDate($slotDate)
    {
        $this->container['slotDate'] = $slotDate;

        return $this;
    }

    /**
     * Gets slotTime
     *
     * @return string
     */
    public function getSlotTime()
    {
        return $this->container['slotTime'];
    }

    /**
     * Sets slotTime
     *
     * @param string $slotTime Applicable to timed ticketing
     *
     * @return $this
     */
    public function setSlotTime($slotTime)
    {
        $this->container['slotTime'] = $slotTime;

        return $this;
    }

    /**
     * Gets slotAllDay
     *
     * @return bool
     */
    public function getSlotAllDay()
    {
        return $this->container['slotAllDay'];
    }

    /**
     * Sets slotAllDay
     *
     * @param bool $slotAllDay Applicable to timed ticketing
     *
     * @return $this
     */
    public function setSlotAllDay($slotAllDay)
    {
        $this->container['slotAllDay'] = $slotAllDay;

        return $this;
    }

    /**
     * Gets nameOnTicket
     *
     * @return string
     */
    public function getNameOnTicket()
    {
        return $this->container['nameOnTicket'];
    }

    /**
     * Sets nameOnTicket
     *
     * @param string $nameOnTicket Customer name printed on ticket
     *
     * @return $this
     */
    public function setNameOnTicket($nameOnTicket)
    {
        $this->container['nameOnTicket'] = $nameOnTicket;

        return $this;
    }

    /**
     * Gets seatEventTitle
     *
     * @return string
     */
    public function getSeatEventTitle()
    {
        return $this->container['seatEventTitle'];
    }

    /**
     * Sets seatEventTitle
     *
     * @param string $seatEventTitle Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatEventTitle($seatEventTitle)
    {
        $this->container['seatEventTitle'] = $seatEventTitle;

        return $this;
    }

    /**
     * Gets seatVenueTitle
     *
     * @return string
     */
    public function getSeatVenueTitle()
    {
        return $this->container['seatVenueTitle'];
    }

    /**
     * Sets seatVenueTitle
     *
     * @param string $seatVenueTitle Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatVenueTitle($seatVenueTitle)
    {
        $this->container['seatVenueTitle'] = $seatVenueTitle;

        return $this;
    }

    /**
     * Gets seatSection
     *
     * @return string
     */
    public function getSeatSection()
    {
        return $this->container['seatSection'];
    }

    /**
     * Sets seatSection
     *
     * @param string $seatSection Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatSection($seatSection)
    {
        $this->container['seatSection'] = $seatSection;

        return $this;
    }

    /**
     * Gets seatCustom1
     *
     * @return string
     */
    public function getSeatCustom1()
    {
        return $this->container['seatCustom1'];
    }

    /**
     * Sets seatCustom1
     *
     * @param string $seatCustom1 Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatCustom1($seatCustom1)
    {
        $this->container['seatCustom1'] = $seatCustom1;

        return $this;
    }

    /**
     * Gets seatCustom2
     *
     * @return string
     */
    public function getSeatCustom2()
    {
        return $this->container['seatCustom2'];
    }

    /**
     * Sets seatCustom2
     *
     * @param string $seatCustom2 Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatCustom2($seatCustom2)
    {
        $this->container['seatCustom2'] = $seatCustom2;

        return $this;
    }

    /**
     * Gets seatRow
     *
     * @return string
     */
    public function getSeatRow()
    {
        return $this->container['seatRow'];
    }

    /**
     * Sets seatRow
     *
     * @param string $seatRow Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatRow($seatRow)
    {
        $this->container['seatRow'] = $seatRow;

        return $this;
    }

    /**
     * Gets seatRowLabel
     *
     * @return string
     */
    public function getSeatRowLabel()
    {
        return $this->container['seatRowLabel'];
    }

    /**
     * Sets seatRowLabel
     *
     * @param string $seatRowLabel Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatRowLabel($seatRowLabel)
    {
        $this->container['seatRowLabel'] = $seatRowLabel;

        return $this;
    }

    /**
     * Gets seatNumber
     *
     * @return int
     */
    public function getSeatNumber()
    {
        return $this->container['seatNumber'];
    }

    /**
     * Sets seatNumber
     *
     * @param int $seatNumber Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatNumber($seatNumber)
    {
        $this->container['seatNumber'] = $seatNumber;

        return $this;
    }

    /**
     * Gets seatNumberLabel
     *
     * @return string
     */
    public function getSeatNumberLabel()
    {
        return $this->container['seatNumberLabel'];
    }

    /**
     * Sets seatNumberLabel
     *
     * @param string $seatNumberLabel Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatNumberLabel($seatNumberLabel)
    {
        $this->container['seatNumberLabel'] = $seatNumberLabel;

        return $this;
    }

    /**
     * Gets seatText
     *
     * @return string
     */
    public function getSeatText()
    {
        return $this->container['seatText'];
    }

    /**
     * Sets seatText
     *
     * @param string $seatText Applicable to reserved seating
     *
     * @return $this
     */
    public function setSeatText($seatText)
    {
        $this->container['seatText'] = $seatText;

        return $this;
    }

    /**
     * Gets noPrint
     *
     * @return bool
     */
    public function getNoPrint()
    {
        return $this->container['noPrint'];
    }

    /**
     * Sets noPrint
     *
     * @param bool $noPrint Indicates tickets that should not be printed
     *
     * @return $this
     */
    public function setNoPrint($noPrint)
    {
        $this->container['noPrint'] = $noPrint;

        return $this;
    }

    /**
     * Gets noBarcode
     *
     * @return bool
     */
    public function getNoBarcode()
    {
        return $this->container['noBarcode'];
    }

    /**
     * Sets noBarcode
     *
     * @param bool $noBarcode Indicates tickets that should not be barcoded
     *
     * @return $this
     */
    public function setNoBarcode($noBarcode)
    {
        $this->container['noBarcode'] = $noBarcode;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string $discount Discounts applied to the ticket
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return string
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param string $fee Oranization charged service fee
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return string
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param string $tax Oranization chaarged tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return string
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param string $refund Alloted refund back to ticket (for reports)
     *
     * @return $this
     */
    public function setRefund($refund)
    {
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets promoCode
     *
     * @return string
     */
    public function getPromoCode()
    {
        return $this->container['promoCode'];
    }

    /**
     * Sets promoCode
     *
     * @param string $promoCode Applicable to promo code discounts
     *
     * @return $this
     */
    public function setPromoCode($promoCode)
    {
        $this->container['promoCode'] = $promoCode;

        return $this;
    }

    /**
     * Gets promoName
     *
     * @return string
     */
    public function getPromoName()
    {
        return $this->container['promoName'];
    }

    /**
     * Sets promoName
     *
     * @param string $promoName Applicable to promo code discounts
     *
     * @return $this
     */
    public function setPromoName($promoName)
    {
        $this->container['promoName'] = $promoName;

        return $this;
    }

    /**
     * Gets promoDescription
     *
     * @return string
     */
    public function getPromoDescription()
    {
        return $this->container['promoDescription'];
    }

    /**
     * Sets promoDescription
     *
     * @param string $promoDescription Applicable to promo code discounts
     *
     * @return $this
     */
    public function setPromoDescription($promoDescription)
    {
        $this->container['promoDescription'] = $promoDescription;

        return $this;
    }

    /**
     * Gets department
     *
     * @return \InteractiveTicketing\Models\Department
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param \InteractiveTicketing\Models\Department $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets scans
     *
     * @return \InteractiveTicketing\Models\Scan[]
     */
    public function getScans()
    {
        return $this->container['scans'];
    }

    /**
     * Sets scans
     *
     * @param \InteractiveTicketing\Models\Scan[] $scans Array of ticket scan activity
     *
     * @return $this
     */
    public function setScans($scans)
    {
        $this->container['scans'] = $scans;

        return $this;
    }

    /**
     * Gets scanPointConfig
     *
     * @return \InteractiveTicketing\Models\ScanPointConfig
     */
    public function getScanPointConfig()
    {
        return $this->container['scanPointConfig'];
    }

    /**
     * Sets scanPointConfig
     *
     * @param \InteractiveTicketing\Models\ScanPointConfig $scanPointConfig scanPointConfig
     *
     * @return $this
     */
    public function setScanPointConfig($scanPointConfig)
    {
        $this->container['scanPointConfig'] = $scanPointConfig;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
