<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.38
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InteractiveTicketing\Models;

use \ArrayAccess;
use \InteractiveTicketing\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'orderId' => 'int',
'dateTime' => 'string',
'testOrder' => 'bool',
'orderType' => 'string',
'firstName' => 'string',
'lastName' => 'string',
'email' => 'string',
'phone' => 'string',
'mobilePhone' => 'string',
'street' => 'string',
'city' => 'string',
'stateProvince' => 'string',
'country' => 'string',
'postalCode' => 'string',
'fees' => 'string',
'taxes' => 'string',
'donations' => 'string',
'grandTotal' => 'string',
'coupons' => 'int',
'couponsTotal' => 'int',
'iPAddress' => 'string',
'browserName' => 'string',
'browserDevice' => 'string',
'sourceCode' => 'string',
'searchTag' => 'string',
'survey' => '\InteractiveTicketing\Models\Survey[]',
'transactions' => '\InteractiveTicketing\Models\Transaction[]',
'tickets' => '\InteractiveTicketing\Models\Ticket[]',
'posCashierName' => 'string',
'suspectFlags' => '\InteractiveTicketing\Models\SuspectFlag[]',
'isSuspicious' => 'bool',
'suspiciousResolved' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'orderId' => null,
'dateTime' => null,
'testOrder' => null,
'orderType' => null,
'firstName' => null,
'lastName' => null,
'email' => null,
'phone' => null,
'mobilePhone' => null,
'street' => null,
'city' => null,
'stateProvince' => null,
'country' => null,
'postalCode' => null,
'fees' => null,
'taxes' => null,
'donations' => null,
'grandTotal' => null,
'coupons' => null,
'couponsTotal' => null,
'iPAddress' => null,
'browserName' => null,
'browserDevice' => null,
'sourceCode' => null,
'searchTag' => null,
'survey' => null,
'transactions' => null,
'tickets' => null,
'posCashierName' => null,
'suspectFlags' => null,
'isSuspicious' => null,
'suspiciousResolved' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderId' => 'orderId',
'dateTime' => 'dateTime',
'testOrder' => 'testOrder',
'orderType' => 'orderType',
'firstName' => 'firstName',
'lastName' => 'lastName',
'email' => 'email',
'phone' => 'phone',
'mobilePhone' => 'mobilePhone',
'street' => 'street',
'city' => 'city',
'stateProvince' => 'stateProvince',
'country' => 'country',
'postalCode' => 'postalCode',
'fees' => 'fees',
'taxes' => 'taxes',
'donations' => 'donations',
'grandTotal' => 'grandTotal',
'coupons' => 'coupons',
'couponsTotal' => 'couponsTotal',
'iPAddress' => 'IPAddress',
'browserName' => 'browserName',
'browserDevice' => 'browserDevice',
'sourceCode' => 'sourceCode',
'searchTag' => 'searchTag',
'survey' => 'survey',
'transactions' => '_transactions',
'tickets' => '_tickets',
'posCashierName' => '_posCashierName',
'suspectFlags' => '_suspectFlags',
'isSuspicious' => '_isSuspicious',
'suspiciousResolved' => '_suspiciousResolved'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderId' => 'setOrderId',
'dateTime' => 'setDateTime',
'testOrder' => 'setTestOrder',
'orderType' => 'setOrderType',
'firstName' => 'setFirstName',
'lastName' => 'setLastName',
'email' => 'setEmail',
'phone' => 'setPhone',
'mobilePhone' => 'setMobilePhone',
'street' => 'setStreet',
'city' => 'setCity',
'stateProvince' => 'setStateProvince',
'country' => 'setCountry',
'postalCode' => 'setPostalCode',
'fees' => 'setFees',
'taxes' => 'setTaxes',
'donations' => 'setDonations',
'grandTotal' => 'setGrandTotal',
'coupons' => 'setCoupons',
'couponsTotal' => 'setCouponsTotal',
'iPAddress' => 'setIPAddress',
'browserName' => 'setBrowserName',
'browserDevice' => 'setBrowserDevice',
'sourceCode' => 'setSourceCode',
'searchTag' => 'setSearchTag',
'survey' => 'setSurvey',
'transactions' => 'setTransactions',
'tickets' => 'setTickets',
'posCashierName' => 'setPosCashierName',
'suspectFlags' => 'setSuspectFlags',
'isSuspicious' => 'setIsSuspicious',
'suspiciousResolved' => 'setSuspiciousResolved'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderId' => 'getOrderId',
'dateTime' => 'getDateTime',
'testOrder' => 'getTestOrder',
'orderType' => 'getOrderType',
'firstName' => 'getFirstName',
'lastName' => 'getLastName',
'email' => 'getEmail',
'phone' => 'getPhone',
'mobilePhone' => 'getMobilePhone',
'street' => 'getStreet',
'city' => 'getCity',
'stateProvince' => 'getStateProvince',
'country' => 'getCountry',
'postalCode' => 'getPostalCode',
'fees' => 'getFees',
'taxes' => 'getTaxes',
'donations' => 'getDonations',
'grandTotal' => 'getGrandTotal',
'coupons' => 'getCoupons',
'couponsTotal' => 'getCouponsTotal',
'iPAddress' => 'getIPAddress',
'browserName' => 'getBrowserName',
'browserDevice' => 'getBrowserDevice',
'sourceCode' => 'getSourceCode',
'searchTag' => 'getSearchTag',
'survey' => 'getSurvey',
'transactions' => 'getTransactions',
'tickets' => 'getTickets',
'posCashierName' => 'getPosCashierName',
'suspectFlags' => 'getSuspectFlags',
'isSuspicious' => 'getIsSuspicious',
'suspiciousResolved' => 'getSuspiciousResolved'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['dateTime'] = isset($data['dateTime']) ? $data['dateTime'] : null;
        $this->container['testOrder'] = isset($data['testOrder']) ? $data['testOrder'] : null;
        $this->container['orderType'] = isset($data['orderType']) ? $data['orderType'] : null;
        $this->container['firstName'] = isset($data['firstName']) ? $data['firstName'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['mobilePhone'] = isset($data['mobilePhone']) ? $data['mobilePhone'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['stateProvince'] = isset($data['stateProvince']) ? $data['stateProvince'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['postalCode'] = isset($data['postalCode']) ? $data['postalCode'] : null;
        $this->container['fees'] = isset($data['fees']) ? $data['fees'] : null;
        $this->container['taxes'] = isset($data['taxes']) ? $data['taxes'] : null;
        $this->container['donations'] = isset($data['donations']) ? $data['donations'] : null;
        $this->container['grandTotal'] = isset($data['grandTotal']) ? $data['grandTotal'] : null;
        $this->container['coupons'] = isset($data['coupons']) ? $data['coupons'] : null;
        $this->container['couponsTotal'] = isset($data['couponsTotal']) ? $data['couponsTotal'] : null;
        $this->container['iPAddress'] = isset($data['iPAddress']) ? $data['iPAddress'] : null;
        $this->container['browserName'] = isset($data['browserName']) ? $data['browserName'] : null;
        $this->container['browserDevice'] = isset($data['browserDevice']) ? $data['browserDevice'] : null;
        $this->container['sourceCode'] = isset($data['sourceCode']) ? $data['sourceCode'] : null;
        $this->container['searchTag'] = isset($data['searchTag']) ? $data['searchTag'] : null;
        $this->container['survey'] = isset($data['survey']) ? $data['survey'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['tickets'] = isset($data['tickets']) ? $data['tickets'] : null;
        $this->container['posCashierName'] = isset($data['posCashierName']) ? $data['posCashierName'] : null;
        $this->container['suspectFlags'] = isset($data['suspectFlags']) ? $data['suspectFlags'] : null;
        $this->container['isSuspicious'] = isset($data['isSuspicious']) ? $data['isSuspicious'] : null;
        $this->container['suspiciousResolved'] = isset($data['suspiciousResolved']) ? $data['suspiciousResolved'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderId
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param int $orderId The order ID
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets dateTime
     *
     * @return string
     */
    public function getDateTime()
    {
        return $this->container['dateTime'];
    }

    /**
     * Sets dateTime
     *
     * @param string $dateTime The order time iso-8601
     *
     * @return $this
     */
    public function setDateTime($dateTime)
    {
        $this->container['dateTime'] = $dateTime;

        return $this;
    }

    /**
     * Gets testOrder
     *
     * @return bool
     */
    public function getTestOrder()
    {
        return $this->container['testOrder'];
    }

    /**
     * Sets testOrder
     *
     * @param bool $testOrder True indicates a test order
     *
     * @return $this
     */
    public function setTestOrder($testOrder)
    {
        $this->container['testOrder'] = $testOrder;

        return $this;
    }

    /**
     * Gets orderType
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType
     *
     * @param string $orderType web | pos | kiosk
     *
     * @return $this
     */
    public function setOrderType($orderType)
    {
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string $firstName Customer first name
     *
     * @return $this
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets lastName
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     *
     * @param string $lastName Customer last name
     *
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Customer email address
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Customer phone number
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets mobilePhone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobilePhone'];
    }

    /**
     * Sets mobilePhone
     *
     * @param string $mobilePhone Customer mobile phone number
     *
     * @return $this
     */
    public function setMobilePhone($mobilePhone)
    {
        $this->container['mobilePhone'] = $mobilePhone;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street Customer street address
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Customer city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets stateProvince
     *
     * @return string
     */
    public function getStateProvince()
    {
        return $this->container['stateProvince'];
    }

    /**
     * Sets stateProvince
     *
     * @param string $stateProvince Customer state or province name
     *
     * @return $this
     */
    public function setStateProvince($stateProvince)
    {
        $this->container['stateProvince'] = $stateProvince;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Customer country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string $postalCode Customer postal code / zip
     *
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return string
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param string $fees Organization charged service fee
     *
     * @return $this
     */
    public function setFees($fees)
    {
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return string
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param string $taxes Organization charged taxes
     *
     * @return $this
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets donations
     *
     * @return string
     */
    public function getDonations()
    {
        return $this->container['donations'];
    }

    /**
     * Sets donations
     *
     * @param string $donations Organization charged donations
     *
     * @return $this
     */
    public function setDonations($donations)
    {
        $this->container['donations'] = $donations;

        return $this;
    }

    /**
     * Gets grandTotal
     *
     * @return string
     */
    public function getGrandTotal()
    {
        return $this->container['grandTotal'];
    }

    /**
     * Sets grandTotal
     *
     * @param string $grandTotal Total charges
     *
     * @return $this
     */
    public function setGrandTotal($grandTotal)
    {
        $this->container['grandTotal'] = $grandTotal;

        return $this;
    }

    /**
     * Gets coupons
     *
     * @return int
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     *
     * @param int $coupons Coupons
     *
     * @return $this
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets couponsTotal
     *
     * @return int
     */
    public function getCouponsTotal()
    {
        return $this->container['couponsTotal'];
    }

    /**
     * Sets couponsTotal
     *
     * @param int $couponsTotal Coupons Total
     *
     * @return $this
     */
    public function setCouponsTotal($couponsTotal)
    {
        $this->container['couponsTotal'] = $couponsTotal;

        return $this;
    }

    /**
     * Gets iPAddress
     *
     * @return string
     */
    public function getIPAddress()
    {
        return $this->container['iPAddress'];
    }

    /**
     * Sets iPAddress
     *
     * @param string $iPAddress Customer IP Address
     *
     * @return $this
     */
    public function setIPAddress($iPAddress)
    {
        $this->container['iPAddress'] = $iPAddress;

        return $this;
    }

    /**
     * Gets browserName
     *
     * @return string
     */
    public function getBrowserName()
    {
        return $this->container['browserName'];
    }

    /**
     * Sets browserName
     *
     * @param string $browserName Customer Browser
     *
     * @return $this
     */
    public function setBrowserName($browserName)
    {
        $this->container['browserName'] = $browserName;

        return $this;
    }

    /**
     * Gets browserDevice
     *
     * @return string
     */
    public function getBrowserDevice()
    {
        return $this->container['browserDevice'];
    }

    /**
     * Sets browserDevice
     *
     * @param string $browserDevice mobile | desktop
     *
     * @return $this
     */
    public function setBrowserDevice($browserDevice)
    {
        $this->container['browserDevice'] = $browserDevice;

        return $this;
    }

    /**
     * Gets sourceCode
     *
     * @return string
     */
    public function getSourceCode()
    {
        return $this->container['sourceCode'];
    }

    /**
     * Sets sourceCode
     *
     * @param string $sourceCode Source code passed to the purchase interface s=myTrackingCode
     *
     * @return $this
     */
    public function setSourceCode($sourceCode)
    {
        $this->container['sourceCode'] = $sourceCode;

        return $this;
    }

    /**
     * Gets searchTag
     *
     * @return string
     */
    public function getSearchTag()
    {
        return $this->container['searchTag'];
    }

    /**
     * Sets searchTag
     *
     * @param string $searchTag Custom searchTag applied to order to bookmark it
     *
     * @return $this
     */
    public function setSearchTag($searchTag)
    {
        $this->container['searchTag'] = $searchTag;

        return $this;
    }

    /**
     * Gets survey
     *
     * @return \InteractiveTicketing\Models\Survey[]
     */
    public function getSurvey()
    {
        return $this->container['survey'];
    }

    /**
     * Sets survey
     *
     * @param \InteractiveTicketing\Models\Survey[] $survey Array of additional form question responses
     *
     * @return $this
     */
    public function setSurvey($survey)
    {
        $this->container['survey'] = $survey;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \InteractiveTicketing\Models\Transaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \InteractiveTicketing\Models\Transaction[] $transactions Array of payment/refund transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets tickets
     *
     * @return \InteractiveTicketing\Models\Ticket[]
     */
    public function getTickets()
    {
        return $this->container['tickets'];
    }

    /**
     * Sets tickets
     *
     * @param \InteractiveTicketing\Models\Ticket[] $tickets Array of tickets ordered
     *
     * @return $this
     */
    public function setTickets($tickets)
    {
        $this->container['tickets'] = $tickets;

        return $this;
    }

    /**
     * Gets posCashierName
     *
     * @return string
     */
    public function getPosCashierName()
    {
        return $this->container['posCashierName'];
    }

    /**
     * Sets posCashierName
     *
     * @param string $posCashierName Applicable to pos orders
     *
     * @return $this
     */
    public function setPosCashierName($posCashierName)
    {
        $this->container['posCashierName'] = $posCashierName;

        return $this;
    }

    /**
     * Gets suspectFlags
     *
     * @return \InteractiveTicketing\Models\SuspectFlag[]
     */
    public function getSuspectFlags()
    {
        return $this->container['suspectFlags'];
    }

    /**
     * Sets suspectFlags
     *
     * @param \InteractiveTicketing\Models\SuspectFlag[] $suspectFlags Array of reasons the order is flagged as suspicious
     *
     * @return $this
     */
    public function setSuspectFlags($suspectFlags)
    {
        $this->container['suspectFlags'] = $suspectFlags;

        return $this;
    }

    /**
     * Gets isSuspicious
     *
     * @return bool
     */
    public function getIsSuspicious()
    {
        return $this->container['isSuspicious'];
    }

    /**
     * Sets isSuspicious
     *
     * @param bool $isSuspicious True indicates if order is flagged as suspicious
     *
     * @return $this
     */
    public function setIsSuspicious($isSuspicious)
    {
        $this->container['isSuspicious'] = $isSuspicious;

        return $this;
    }

    /**
     * Gets suspiciousResolved
     *
     * @return bool
     */
    public function getSuspiciousResolved()
    {
        return $this->container['suspiciousResolved'];
    }

    /**
     * Sets suspiciousResolved
     *
     * @param bool $suspiciousResolved True indicates if a suspicous order was approved in the dashboard
     *
     * @return $this
     */
    public function setSuspiciousResolved($suspiciousResolved)
    {
        $this->container['suspiciousResolved'] = $suspiciousResolved;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
