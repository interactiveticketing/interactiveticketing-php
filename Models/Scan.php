<?php
/**
 * Scan
 *
 * PHP version 5
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v2`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.10
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InteractiveTicketing\Models;

use \ArrayAccess;
use \InteractiveTicketing\ObjectSerializer;

/**
 * Scan Class Doc Comment
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Scan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Scan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'scanId' => 'int',
'time' => 'string',
'gate' => 'string',
'uploadTime' => 'string',
'method' => 'string',
'scanPoint' => '\InteractiveTicketing\Models\ScanPoint',
'device' => '\InteractiveTicketing\Models\Device'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'scanId' => null,
'time' => null,
'gate' => null,
'uploadTime' => null,
'method' => null,
'scanPoint' => null,
'device' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scanId' => 'scanId',
'time' => 'time',
'gate' => 'gate',
'uploadTime' => 'uploadTime',
'method' => 'method',
'scanPoint' => '_scanPoint',
'device' => '_device'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scanId' => 'setScanId',
'time' => 'setTime',
'gate' => 'setGate',
'uploadTime' => 'setUploadTime',
'method' => 'setMethod',
'scanPoint' => 'setScanPoint',
'device' => 'setDevice'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scanId' => 'getScanId',
'time' => 'getTime',
'gate' => 'getGate',
'uploadTime' => 'getUploadTime',
'method' => 'getMethod',
'scanPoint' => 'getScanPoint',
'device' => 'getDevice'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scanId'] = isset($data['scanId']) ? $data['scanId'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['gate'] = isset($data['gate']) ? $data['gate'] : null;
        $this->container['uploadTime'] = isset($data['uploadTime']) ? $data['uploadTime'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['scanPoint'] = isset($data['scanPoint']) ? $data['scanPoint'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scanId
     *
     * @return int
     */
    public function getScanId()
    {
        return $this->container['scanId'];
    }

    /**
     * Sets scanId
     *
     * @param int $scanId The scan ID
     *
     * @return $this
     */
    public function setScanId($scanId)
    {
        $this->container['scanId'] = $scanId;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time The scan time iso-8601
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets gate
     *
     * @return string
     */
    public function getGate()
    {
        return $this->container['gate'];
    }

    /**
     * Sets gate
     *
     * @param string $gate Gate name identifier string
     *
     * @return $this
     */
    public function setGate($gate)
    {
        $this->container['gate'] = $gate;

        return $this;
    }

    /**
     * Gets uploadTime
     *
     * @return string
     */
    public function getUploadTime()
    {
        return $this->container['uploadTime'];
    }

    /**
     * Sets uploadTime
     *
     * @param string $uploadTime The scan device sync time with server iso-8601
     *
     * @return $this
     */
    public function setUploadTime($uploadTime)
    {
        $this->container['uploadTime'] = $uploadTime;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method Ticket format scanned: `single` | `mobile` | `passbook`
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets scanPoint
     *
     * @return \InteractiveTicketing\Models\ScanPoint
     */
    public function getScanPoint()
    {
        return $this->container['scanPoint'];
    }

    /**
     * Sets scanPoint
     *
     * @param \InteractiveTicketing\Models\ScanPoint $scanPoint scanPoint
     *
     * @return $this
     */
    public function setScanPoint($scanPoint)
    {
        $this->container['scanPoint'] = $scanPoint;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \InteractiveTicketing\Models\Device
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \InteractiveTicketing\Models\Device $device device
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
