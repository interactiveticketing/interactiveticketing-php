<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Developer API
 *
 * Get your API Key from the [Dashboard](/dashboard/).<br/>Send all API requests with http header `X-API-Key: YOUR-API-KEY-HERE`.<br/>Base URL: `https://secure.interactiveticketing.com/developers/api/v4`<br/>Contact support@interactiveticketing.com for help.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.38
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace InteractiveTicketing\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use InteractiveTicketing\ApiException;
use InteractiveTicketing\Configuration;
use InteractiveTicketing\HeaderSelector;
use InteractiveTicketing\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  InteractiveTicketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation eventsEventIdAbandonedShoppingCartsGet
     *
     * Query Abandoned Shopping Cart Data
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param  int $email Return entries with matching email address. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InteractiveTicketing\Models\PaginatedCartEmails
     */
    public function eventsEventIdAbandonedShoppingCartsGet($eventId, $fromCartEmailId = null, $email = null, $start = null, $limit = null)
    {
        list($response) = $this->eventsEventIdAbandonedShoppingCartsGetWithHttpInfo($eventId, $fromCartEmailId, $email, $start, $limit);
        return $response;
    }

    /**
     * Operation eventsEventIdAbandonedShoppingCartsGetWithHttpInfo
     *
     * Query Abandoned Shopping Cart Data
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param  int $email Return entries with matching email address. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InteractiveTicketing\Models\PaginatedCartEmails, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdAbandonedShoppingCartsGetWithHttpInfo($eventId, $fromCartEmailId = null, $email = null, $start = null, $limit = null)
    {
        $returnType = '\InteractiveTicketing\Models\PaginatedCartEmails';
        $request = $this->eventsEventIdAbandonedShoppingCartsGetRequest($eventId, $fromCartEmailId, $email, $start, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InteractiveTicketing\Models\PaginatedCartEmails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eventsEventIdAbandonedShoppingCartsGetAsync
     *
     * Query Abandoned Shopping Cart Data
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param  int $email Return entries with matching email address. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdAbandonedShoppingCartsGetAsync($eventId, $fromCartEmailId = null, $email = null, $start = null, $limit = null)
    {
        return $this->eventsEventIdAbandonedShoppingCartsGetAsyncWithHttpInfo($eventId, $fromCartEmailId, $email, $start, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventsEventIdAbandonedShoppingCartsGetAsyncWithHttpInfo
     *
     * Query Abandoned Shopping Cart Data
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param  int $email Return entries with matching email address. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdAbandonedShoppingCartsGetAsyncWithHttpInfo($eventId, $fromCartEmailId = null, $email = null, $start = null, $limit = null)
    {
        $returnType = '\InteractiveTicketing\Models\PaginatedCartEmails';
        $request = $this->eventsEventIdAbandonedShoppingCartsGetRequest($eventId, $fromCartEmailId, $email, $start, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventsEventIdAbandonedShoppingCartsGet'
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromCartEmailId Return entries with &#x60;cartEmailId&#x60; greater than &#x60;fromCartEmailId&#x60;. (optional)
     * @param  int $email Return entries with matching email address. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventsEventIdAbandonedShoppingCartsGetRequest($eventId, $fromCartEmailId = null, $email = null, $start = null, $limit = null)
    {
        // verify the required parameter 'eventId' is set
        if ($eventId === null || (is_array($eventId) && count($eventId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventId when calling eventsEventIdAbandonedShoppingCartsGet'
            );
        }

        $resourcePath = '/events/{eventId}/abandonedShoppingCarts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fromCartEmailId !== null) {
            $queryParams['fromCartEmailId'] = ObjectSerializer::toQueryValue($fromCartEmailId, null);
        }
        // query params
        if ($email !== null) {
            $queryParams['email'] = ObjectSerializer::toQueryValue($email, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }

        // path params
        if ($eventId !== null) {
            $resourcePath = str_replace(
                '{' . 'eventId' . '}',
                ObjectSerializer::toPathValue($eventId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventsEventIdGet
     *
     * Fetch Event by ID
     *
     * @param  int $eventId ID of event to return (required)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InteractiveTicketing\Models\Event
     */
    public function eventsEventIdGet($eventId)
    {
        list($response) = $this->eventsEventIdGetWithHttpInfo($eventId);
        return $response;
    }

    /**
     * Operation eventsEventIdGetWithHttpInfo
     *
     * Fetch Event by ID
     *
     * @param  int $eventId ID of event to return (required)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InteractiveTicketing\Models\Event, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdGetWithHttpInfo($eventId)
    {
        $returnType = '\InteractiveTicketing\Models\Event';
        $request = $this->eventsEventIdGetRequest($eventId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InteractiveTicketing\Models\Event',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eventsEventIdGetAsync
     *
     * Fetch Event by ID
     *
     * @param  int $eventId ID of event to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdGetAsync($eventId)
    {
        return $this->eventsEventIdGetAsyncWithHttpInfo($eventId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventsEventIdGetAsyncWithHttpInfo
     *
     * Fetch Event by ID
     *
     * @param  int $eventId ID of event to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdGetAsyncWithHttpInfo($eventId)
    {
        $returnType = '\InteractiveTicketing\Models\Event';
        $request = $this->eventsEventIdGetRequest($eventId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventsEventIdGet'
     *
     * @param  int $eventId ID of event to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventsEventIdGetRequest($eventId)
    {
        // verify the required parameter 'eventId' is set
        if ($eventId === null || (is_array($eventId) && count($eventId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventId when calling eventsEventIdGet'
            );
        }

        $resourcePath = '/events/{eventId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($eventId !== null) {
            $resourcePath = str_replace(
                '{' . 'eventId' . '}',
                ObjectSerializer::toPathValue($eventId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventsEventIdOrdersBarcodeBarcodeGet
     *
     * Fetch Order by Barcode
     *
     * @param  int $eventId ID of event to return (required)
     * @param  string $barcode Barcode from ticket of the order to return (required)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InteractiveTicketing\Models\Order
     */
    public function eventsEventIdOrdersBarcodeBarcodeGet($eventId, $barcode)
    {
        list($response) = $this->eventsEventIdOrdersBarcodeBarcodeGetWithHttpInfo($eventId, $barcode);
        return $response;
    }

    /**
     * Operation eventsEventIdOrdersBarcodeBarcodeGetWithHttpInfo
     *
     * Fetch Order by Barcode
     *
     * @param  int $eventId ID of event to return (required)
     * @param  string $barcode Barcode from ticket of the order to return (required)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InteractiveTicketing\Models\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdOrdersBarcodeBarcodeGetWithHttpInfo($eventId, $barcode)
    {
        $returnType = '\InteractiveTicketing\Models\Order';
        $request = $this->eventsEventIdOrdersBarcodeBarcodeGetRequest($eventId, $barcode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InteractiveTicketing\Models\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eventsEventIdOrdersBarcodeBarcodeGetAsync
     *
     * Fetch Order by Barcode
     *
     * @param  int $eventId ID of event to return (required)
     * @param  string $barcode Barcode from ticket of the order to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdOrdersBarcodeBarcodeGetAsync($eventId, $barcode)
    {
        return $this->eventsEventIdOrdersBarcodeBarcodeGetAsyncWithHttpInfo($eventId, $barcode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventsEventIdOrdersBarcodeBarcodeGetAsyncWithHttpInfo
     *
     * Fetch Order by Barcode
     *
     * @param  int $eventId ID of event to return (required)
     * @param  string $barcode Barcode from ticket of the order to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdOrdersBarcodeBarcodeGetAsyncWithHttpInfo($eventId, $barcode)
    {
        $returnType = '\InteractiveTicketing\Models\Order';
        $request = $this->eventsEventIdOrdersBarcodeBarcodeGetRequest($eventId, $barcode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventsEventIdOrdersBarcodeBarcodeGet'
     *
     * @param  int $eventId ID of event to return (required)
     * @param  string $barcode Barcode from ticket of the order to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventsEventIdOrdersBarcodeBarcodeGetRequest($eventId, $barcode)
    {
        // verify the required parameter 'eventId' is set
        if ($eventId === null || (is_array($eventId) && count($eventId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventId when calling eventsEventIdOrdersBarcodeBarcodeGet'
            );
        }
        // verify the required parameter 'barcode' is set
        if ($barcode === null || (is_array($barcode) && count($barcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcode when calling eventsEventIdOrdersBarcodeBarcodeGet'
            );
        }

        $resourcePath = '/events/{eventId}/orders/barcode/{barcode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($eventId !== null) {
            $resourcePath = str_replace(
                '{' . 'eventId' . '}',
                ObjectSerializer::toPathValue($eventId),
                $resourcePath
            );
        }
        // path params
        if ($barcode !== null) {
            $resourcePath = str_replace(
                '{' . 'barcode' . '}',
                ObjectSerializer::toPathValue($barcode),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventsEventIdOrdersGet
     *
     * Query Orders
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param  bool $testMode Query test orders only. (optional)
     * @param  string $orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InteractiveTicketing\Models\PaginatedOrders
     */
    public function eventsEventIdOrdersGet($eventId, $fromOrderId = null, $start = null, $limit = null, $testMode = null, $orderType = null)
    {
        list($response) = $this->eventsEventIdOrdersGetWithHttpInfo($eventId, $fromOrderId, $start, $limit, $testMode, $orderType);
        return $response;
    }

    /**
     * Operation eventsEventIdOrdersGetWithHttpInfo
     *
     * Query Orders
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param  bool $testMode Query test orders only. (optional)
     * @param  string $orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InteractiveTicketing\Models\PaginatedOrders, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdOrdersGetWithHttpInfo($eventId, $fromOrderId = null, $start = null, $limit = null, $testMode = null, $orderType = null)
    {
        $returnType = '\InteractiveTicketing\Models\PaginatedOrders';
        $request = $this->eventsEventIdOrdersGetRequest($eventId, $fromOrderId, $start, $limit, $testMode, $orderType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InteractiveTicketing\Models\PaginatedOrders',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eventsEventIdOrdersGetAsync
     *
     * Query Orders
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param  bool $testMode Query test orders only. (optional)
     * @param  string $orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdOrdersGetAsync($eventId, $fromOrderId = null, $start = null, $limit = null, $testMode = null, $orderType = null)
    {
        return $this->eventsEventIdOrdersGetAsyncWithHttpInfo($eventId, $fromOrderId, $start, $limit, $testMode, $orderType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventsEventIdOrdersGetAsyncWithHttpInfo
     *
     * Query Orders
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param  bool $testMode Query test orders only. (optional)
     * @param  string $orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdOrdersGetAsyncWithHttpInfo($eventId, $fromOrderId = null, $start = null, $limit = null, $testMode = null, $orderType = null)
    {
        $returnType = '\InteractiveTicketing\Models\PaginatedOrders';
        $request = $this->eventsEventIdOrdersGetRequest($eventId, $fromOrderId, $start, $limit, $testMode, $orderType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventsEventIdOrdersGet'
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $fromOrderId Return orders with &#x60;orderId&#x60; greater than &#x60;fromOrderId&#x60;. (optional)
     * @param  int $start For pagination, return orders from &#x60;start&#x60; row index. (optional)
     * @param  int $limit For pagination, limit results to &#x60;limit&#x60; number of rows. (optional)
     * @param  bool $testMode Query test orders only. (optional)
     * @param  string $orderType To query only &#x60;web&#x60;, &#x60;pos&#x60;, or &#x60;kiosk&#x60; orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventsEventIdOrdersGetRequest($eventId, $fromOrderId = null, $start = null, $limit = null, $testMode = null, $orderType = null)
    {
        // verify the required parameter 'eventId' is set
        if ($eventId === null || (is_array($eventId) && count($eventId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventId when calling eventsEventIdOrdersGet'
            );
        }

        $resourcePath = '/events/{eventId}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fromOrderId !== null) {
            $queryParams['fromOrderId'] = ObjectSerializer::toQueryValue($fromOrderId, null);
        }
        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($testMode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($testMode, null);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($orderType, null);
        }

        // path params
        if ($eventId !== null) {
            $resourcePath = str_replace(
                '{' . 'eventId' . '}',
                ObjectSerializer::toPathValue($eventId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventsEventIdOrdersOrderIdGet
     *
     * Fetch Order by ID
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $orderId ID of order to return (required)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InteractiveTicketing\Models\Order
     */
    public function eventsEventIdOrdersOrderIdGet($eventId, $orderId)
    {
        list($response) = $this->eventsEventIdOrdersOrderIdGetWithHttpInfo($eventId, $orderId);
        return $response;
    }

    /**
     * Operation eventsEventIdOrdersOrderIdGetWithHttpInfo
     *
     * Fetch Order by ID
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $orderId ID of order to return (required)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InteractiveTicketing\Models\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsEventIdOrdersOrderIdGetWithHttpInfo($eventId, $orderId)
    {
        $returnType = '\InteractiveTicketing\Models\Order';
        $request = $this->eventsEventIdOrdersOrderIdGetRequest($eventId, $orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InteractiveTicketing\Models\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eventsEventIdOrdersOrderIdGetAsync
     *
     * Fetch Order by ID
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $orderId ID of order to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdOrdersOrderIdGetAsync($eventId, $orderId)
    {
        return $this->eventsEventIdOrdersOrderIdGetAsyncWithHttpInfo($eventId, $orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventsEventIdOrdersOrderIdGetAsyncWithHttpInfo
     *
     * Fetch Order by ID
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $orderId ID of order to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsEventIdOrdersOrderIdGetAsyncWithHttpInfo($eventId, $orderId)
    {
        $returnType = '\InteractiveTicketing\Models\Order';
        $request = $this->eventsEventIdOrdersOrderIdGetRequest($eventId, $orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventsEventIdOrdersOrderIdGet'
     *
     * @param  int $eventId ID of event to return (required)
     * @param  int $orderId ID of order to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventsEventIdOrdersOrderIdGetRequest($eventId, $orderId)
    {
        // verify the required parameter 'eventId' is set
        if ($eventId === null || (is_array($eventId) && count($eventId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventId when calling eventsEventIdOrdersOrderIdGet'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling eventsEventIdOrdersOrderIdGet'
            );
        }

        $resourcePath = '/events/{eventId}/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($eventId !== null) {
            $resourcePath = str_replace(
                '{' . 'eventId' . '}',
                ObjectSerializer::toPathValue($eventId),
                $resourcePath
            );
        }
        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation eventsGet
     *
     * List All Events
     *
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InteractiveTicketing\Models\Event[]
     */
    public function eventsGet()
    {
        list($response) = $this->eventsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation eventsGetWithHttpInfo
     *
     * List All Events
     *
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InteractiveTicketing\Models\Event[], HTTP status code, HTTP response headers (array of strings)
     */
    public function eventsGetWithHttpInfo()
    {
        $returnType = '\InteractiveTicketing\Models\Event[]';
        $request = $this->eventsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InteractiveTicketing\Models\Event[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation eventsGetAsync
     *
     * List All Events
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsGetAsync()
    {
        return $this->eventsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation eventsGetAsyncWithHttpInfo
     *
     * List All Events
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function eventsGetAsyncWithHttpInfo()
    {
        $returnType = '\InteractiveTicketing\Models\Event[]';
        $request = $this->eventsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'eventsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function eventsGetRequest()
    {

        $resourcePath = '/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation scanPost
     *
     * Scan Ticket
     *
     * @param  \InteractiveTicketing\Models\ScanRequest $body List of user object (required)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \InteractiveTicketing\Models\ScanResponse
     */
    public function scanPost($body)
    {
        list($response) = $this->scanPostWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation scanPostWithHttpInfo
     *
     * Scan Ticket
     *
     * @param  \InteractiveTicketing\Models\ScanRequest $body List of user object (required)
     *
     * @throws \InteractiveTicketing\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \InteractiveTicketing\Models\ScanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scanPostWithHttpInfo($body)
    {
        $returnType = '\InteractiveTicketing\Models\ScanResponse';
        $request = $this->scanPostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\InteractiveTicketing\Models\ScanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation scanPostAsync
     *
     * Scan Ticket
     *
     * @param  \InteractiveTicketing\Models\ScanRequest $body List of user object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scanPostAsync($body)
    {
        return $this->scanPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scanPostAsyncWithHttpInfo
     *
     * Scan Ticket
     *
     * @param  \InteractiveTicketing\Models\ScanRequest $body List of user object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scanPostAsyncWithHttpInfo($body)
    {
        $returnType = '\InteractiveTicketing\Models\ScanResponse';
        $request = $this->scanPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'scanPost'
     *
     * @param  \InteractiveTicketing\Models\ScanRequest $body List of user object (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scanPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling scanPost'
            );
        }

        $resourcePath = '/scan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
